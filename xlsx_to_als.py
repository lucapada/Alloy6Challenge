import questionary
import pandas as pd
import os

# 0. ask the user the path of the Excel file
xls_path = questionary.path("Please provide the (relative) path of the Excel file generated by Microsoft Forms:").ask()

# 1. leggo il file excel e prendo tutte le colonne
df = pd.read_excel(xls_path)
columns = [c for c in df.columns if not (c.startswith("Points") or c.startswith("Feedback"))]

# 2.1 chiedo all'utente quale colonna vuole usare come ID dell'utente
id_column = questionary.select("Which column do you want to use as Student ID?", choices=columns).ask()
# 2.2 chiedo all'utente quale colonna contiene il codice persona
personcode_column = questionary.select("Which column contains the Person Code of the student?", choices=columns).ask()
# 2.3 chiedo all'utente se il codice persona è incluso in una mail o meno
personcode_is_email = questionary.confirm("Should the Person Code be isolated from an email (e.g. PERSONCODE@polimi.it)?").ask()
# 2.4 chiedo all'utente quali sono le colonne che contengono le risposte
answer_columns = questionary.checkbox("Which columns contain the answers of the students to be merged in a unique .als file?", choices=columns).ask()

print("\n\n")

if not id_column or not personcode_column or not answer_columns:
    print("[X] You must select at least one column for the ID, one for the person code and one for the answers.")
else:
    # 3. chiedo all'utente dove vuole salvare le risposte degli studenti
    working_path = questionary.path("Please provide the (relative) path to save all the .als files and the file containing the mapping ID/Person Code:").ask()
    # 3.1 chiedo all'utente come vuole chiamare la cartella in cui salvare le risposte
    working_folder_name = questionary.text("What do you want to call the folder where all the files will be saved?").ask()
    
    if not working_path or not working_folder_name:
        print("[X] You must provide a path and a folder name.")
    else:
        working_path = f"{working_path}/{working_folder_name}"

        # 3.2 creo la cartella se non esiste
        os.makedirs(working_path, exist_ok=True)

        # 4. chiedo all'utente se i files vuole raggrupparli per il nome del docente
        group_by_teacher = questionary.confirm("Do you want to group the answers by teacher?").ask()
        # 4.1 se vuole raggrupparli chiedo quale colonna contiene il nome del docente
        if group_by_teacher:
            teacher_column = questionary.select("Which column contains the name of the teacher?", choices=columns).ask()

        # 5. creo la struttura dati per memorizzare il mapping tra studente e ID
        student_mapping = []

        # 5. leggo il file excel e prendo tutte le colonne
        try:
            for i, r in df.iterrows():
                student_personcode = r[personcode_column].split("@")[0] if personcode_is_email else r[personcode_column]
                student_id = r[id_column]
                teacher = r[teacher_column]

                print(f"Processing Student {student_id}...", end="\r")

                # 5.1. se devo raggruppare per prof., creo la cartella se non esiste
                if group_by_teacher:
                    os.makedirs(f"{working_path}/{teacher}", exist_ok=True)
                    working_file = f"{working_path}/{teacher}/{student_id}.als" 
                else:
                    working_file = f"{working_path}/{student_id}.als"

                with open(working_file, "w") as f:
                    for k, ac in enumerate(answer_columns):
                        f.write("// " + ac + "\n")
                        f.write(r[ac])
                        f.write("\n\n")

                # 5.2 aggiungo il mapping tra studente e ID
                student_mapping.append({
                    "student_Id": student_id,
                    "student_PersonCode": student_personcode,
                    "teacher": teacher,
                    "als_file": working_file
                })

                print(f"[✓] Student {student_id} processed successfully.")
                
            # 6. salvo il mapping tra studente e ID
            print("Saving mapping files...", end="\r")
            with open(f"{working_path}/student_mapping.csv", "w") as f:
                f.write("ID,Person Code,Teacher,.als File\n")
                for sm in student_mapping:
                    f.write(f"{sm['student_Id']},{sm['student_PersonCode']},{sm['teacher']},{sm['als_file']}\n")

            print("[✓] Mapping files saved successfully.")
        except Exception as e:
            print(f"[X] An error occurred: {e}")